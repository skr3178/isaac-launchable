# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# (1) We use this file to configure the nginx reverse proxy required for each course.
worker_processes auto;
pid /etc/nginx/.nginx.pid;

load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

events {
	worker_connections 768;
}

http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	client_max_body_size 0;
	keepalive_timeout 65;
	types_hash_max_size 2048;

	default_type application/octet-stream;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;
	ssl_certificate	 /etc/nginx/tls/cert.pem;
	ssl_certificate_key /etc/nginx/tls/key.pem;

	access_log /var/log/access.log;
	error_log /var/log/error.log;

	gzip on;
	gzip_disable "msie6";

    
	server {
		listen 80 default_server;
		listen [::]:80 default_server;

		# Global proxy settings
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_buffering off;
		proxy_redirect off;
		
		location /lab {
			access_by_lua_block {
				ngx.req.read_body()
				ngx.req.set_body_data("href=http://localhost/login&base=.&password="..ngx.req.get_uri_args(1)["token"])
				ngx.req.set_method(ngx.HTTP_POST)
				ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded")
				ngx.req.set_uri("/login")
			}
			proxy_pass http://localhost:8080/;
		}

		location /viewer {
			proxy_pass http://localhost:5173/viewer;
		}

		location / {
			proxy_pass http://localhost:8080/;
		}
	}


	server {
		listen 443 ssl default_server;
		listen [::]:443 ssl default_server;

		# Global proxy settings
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
		proxy_set_header Host $http_host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_buffering off;
		proxy_redirect off;
		
		location /lab {
			access_by_lua_block {
				ngx.req.read_body()
				ngx.req.set_body_data("href=http://localhost/login&base=.&password="..ngx.req.get_uri_args(1)["token"])
				ngx.req.set_method(ngx.HTTP_POST)
				ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded")
				ngx.req.set_uri("/login")
			}
			proxy_pass http://localhost:8080/;
		}

		location /viewer {
			proxy_pass http://localhost:5173/viewer;
		}

		location / {
			proxy_pass http://localhost:8080/;
		}
	}
}
